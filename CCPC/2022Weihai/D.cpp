#include <cstdio>
#include <algorithm>
int adj[19][6][2];
const int INF = 1 << 30;
void init()
{
    adj[0][0][0] = 1;
    adj[0][0][1] = 2;
    adj[0][1][0] = 3;
    adj[0][1][1] = 7;
    adj[0][2][0] = 4;
    adj[0][2][1] = 9;

    adj[1][0][0] = 4;
    adj[1][0][1] = 8;
    adj[1][1][0] = 5;
    adj[1][1][1] = 10;

    adj[2][0][0] = 5;
    adj[2][0][1] = 9;
    adj[2][1][0] = 6;
    adj[2][1][1] = 11;
    adj[2][2][0] = 1;
    adj[2][2][1] = 0;

    adj[3][0][0] = 4;
    adj[3][0][1] = 5;
    adj[3][1][0] = 8;
    adj[3][1][1] = 13;

    adj[4][0][0] = 5;
    adj[4][0][1] = 6;
    adj[4][1][0] = 8;
    adj[4][1][1] = 12;
    adj[4][2][0] = 9;
    adj[4][2][1] = 14;

    adj[5][0][0] = 9;
    adj[5][0][1] = 13;
    adj[5][1][0] = 10;
    adj[5][1][1] = 15;
    adj[5][2][0] = 4;
    adj[5][2][1] = 3;

    adj[6][0][0] = 10;
    adj[6][0][1] = 14;
    adj[6][1][0] = 5;
    adj[6][1][1] = 4;

    adj[7][0][0] = 3;
    adj[7][0][1] = 0;
    adj[7][1][0] = 8;
    adj[7][1][1] = 9;
    adj[7][2][0] = 12;
    adj[7][2][1] = 16;

    adj[8][0][0] = 4;
    adj[8][0][1] = 1;
    adj[8][1][0] = 9;
    adj[8][1][1] = 10;
    adj[8][2][0] = 13;
    adj[8][2][1] = 17;

    adj[9][0][0] = 4;
    adj[9][0][1] = 0;
    adj[9][1][0] = 5;
    adj[9][1][1] = 2;
    adj[9][2][0] = 8;
    adj[9][2][1] = 7;
    adj[9][3][0] = 10;
    adj[9][3][1] = 11;
    adj[9][4][0] = 13;
    adj[9][4][1] = 16;
    adj[9][5][0] = 14;
    adj[9][5][1] = 18;

    adj[10][0][0] = 5;
    adj[10][0][1] = 1;
    adj[10][1][0] = 14;
    adj[10][1][1] = 17;
    adj[10][2][0] = 9;
    adj[10][2][1] = 8;

    adj[11][0][0] = 6;
    adj[11][0][1] = 2;
    adj[11][1][0] = 15;
    adj[11][1][1] = 18;
    adj[11][2][0] = 10;
    adj[11][2][1] = 9;

    adj[12][0][0] = 8;
    adj[12][0][1] = 4;
    adj[12][1][0] = 13;
    adj[12][1][1] = 14;

    adj[13][0][0] = 8;
    adj[13][0][1] = 3;
    adj[13][1][0] = 9;
    adj[13][1][1] = 5;
    adj[13][2][0] = 14;
    adj[13][2][1] = 15;

    adj[14][0][0] = 9;
    adj[14][0][1] = 4;
    adj[14][1][0] = 10;
    adj[14][1][1] = 6;
    adj[14][2][0] = 13;
    adj[14][2][1] = 12;

    adj[15][0][0] = 10;
    adj[15][0][1] = 5;
    adj[15][1][0] = 14;
    adj[15][1][1] = 13;

    adj[16][0][0] = 12;
    adj[16][0][1] = 7;
    adj[16][1][0] = 13;
    adj[16][1][1] = 9;
    adj[16][2][0] = 17;
    adj[16][2][1] = 18;

    adj[17][0][0] = 13;
    adj[17][0][1] = 8;
    adj[17][1][0] = 14;
    adj[17][1][1] = 10;

    adj[18][0][0] = 14;
    adj[18][0][1] = 9;
    adj[18][1][0] = 15;
    adj[18][1][1] = 11;
    adj[18][2][0] = 17;
    adj[18][2][1] = 16;
}

int score[19];
int n;
int has[19];
int f[1 << 19];
int st[1 << 19], top;
char s[5][100];
int save()
{
    int ret = 0;
    for (int i = 0; i < 19; ++i) ret |= (has[i] << i);
    return ret;
}
int dfs(int now)
{
    // int now = save();
    if(now == 0) return 0;
    if(f[now] != -INF) return f[now];

    st[++top] = now;
    for (int i = 0; i < 19; ++i)
    {
        for (int j = 0; j < 6; ++j)
        {
            int x = adj[i][j][0], y = adj[i][j][1];
            if(x == 0) break;
            if(has[i] && has[x] && !has[y])
            {
                has[i] = 0, has[x] = 0, has[y] = 1;
                f[now] = std::max(f[now], dfs(now ^ (1 << i) ^ (1 << x) ^ (1 << y)) + score[x]);
                has[i] = 1, has[x] = 1,has[y] = 0;
            }
        }
    }
    for (int i = 0; i < 19; ++i)
        if (has[i]) has[i] = 0, f[now] = std::max(f[now], dfs(now ^ (1 << i))), has[i] = 1;
    return f[now];
}
int main()
{
    init();
    for (int i = 0; i < 19; ++i) scanf("%d", score + i);
    for (int i = 0; i < (1 << 19); ++i) f[i] = -INF;
    scanf("%d", &n);
    while(n--)
    {
        scanf("%s%s%s%s%s", s[0], s[1], s[2], s[3], s[4]);
        has[0] = (s[0][0] == '#');
        has[1] = (s[0][1] == '#');
        has[2] = (s[0][2] == '#');
        has[3] = (s[1][0] == '#');
        has[4] = (s[1][1] == '#');
        has[5] = (s[1][2] == '#');
        has[6] = (s[1][3] == '#');
        has[7] = (s[2][0] == '#');
        has[8] = (s[2][1] == '#');
        has[9] = (s[2][2] == '#');
        has[10] = (s[2][3] == '#');
        has[11] = (s[2][4] == '#');
        has[12] = (s[3][0] == '#');
        has[13] = (s[3][1] == '#');
        has[14] = (s[3][2] == '#');
        has[15] = (s[3][3] == '#');
        has[16] = (s[4][0] == '#');
        has[17] = (s[4][1] == '#');
        has[18] = (s[4][2] == '#');
        printf("%d\n", dfs(save()));
//        while (top) f[st[top--]] = -INF;
    }
    return 0;
}